{"version":3,"sources":["data/routes.js","pages/Home.js","pages/Zip.js","pages/FourOFour.js","App.js","serviceWorker.js","index.js"],"names":["Home","works","routes","map","w","key","tag","href","url","name","date","description","id","style","display","className","ZipHome","FourOFour","App","list","r","hasOwnProperty","exact","path","component","window","location","Zip","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAAe,GACX,CAAI,IAAO,SACP,KAAQ,uBACR,KAAQ,cACR,YAAe,wDACf,IAAO,gCAEX,CACI,IAAO,YACP,KAAQ,eACR,KAAQ,WACR,YAAe,6CACf,IAAO,sDAEX,CACI,IAAO,MACP,KAAQ,eACR,KAAQ,OACR,YAAe,0DACf,IAAO,QAEX,CACI,IAAO,YACP,KAAQ,wCACR,KAAQ,YACR,YAAe,yDACf,IAAO,wEAEX,CACI,IAAO,QACP,KAAQ,iCACR,KAAQ,WACR,YAAe,kDACf,IAAO,mEAEX,CACI,IAAO,mBACP,KAAQ,mBACR,KAAQ,gBACR,YAAe,6CACf,IAAO,0DAEX,CACI,IAAO,eACP,KAAQ,eACR,KAAQ,iBACR,YAAe,mEACf,IAAO,2DCpBAA,MAvBf,WACE,IAAMC,EAAQC,EAAOC,KAAI,SAACC,GACxB,OACE,yBAAKC,IAAKD,EAAEE,KACV,4BAAI,uBAAGC,KAAMH,EAAEI,KAAMJ,EAAEK,OACvB,2BAAIL,EAAEM,KAAN,KAAcN,EAAEO,iBAKtB,OACE,yBAAKC,GAAG,QACJ,oCACA,yBAAKC,MAAO,CAACC,QAAS,SAClB,qCACA,yBAAKC,UAAU,cACTd,MCNHe,MAZf,WACE,OACE,6BACI,4CACA,yOACA,2BAAG,uBAAGT,KAAK,gBAAR,wBACH,2BAAG,uBAAGA,KAAK,sCAAR,qBACH,2BAAG,uBAAGA,KAAK,cAAR,SAAH,WAA6C,uBAAGA,KAAK,YAAR,QAA7C,WAAoF,uBAAGA,KAAK,sBAAR,cCC7EU,MARf,WACE,OACE,2CCSW,SAASC,IACtB,IAAMC,EAAOjB,EAAOC,KAAI,SAACiB,GACvB,OAAIA,EAAEC,eAAe,OAEjB,kBAAC,IAAD,CAAOhB,IAAKe,EAAEd,IAAKgB,OAAK,EAACC,KAAI,WAAMH,EAAEd,KAAOkB,UAAW,WAAiC,OAAzBC,OAAOC,SAAWN,EAAEZ,IAAY,QAG1F,QAIX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACIW,EACF,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAChB,kBAACI,EAAD,OAEF,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,IAAID,OAAK,GACnB,kBAAC,EAAD,SCvBUM,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.990142b1.chunk.js","sourcesContent":["export default [\n    {   \"tag\": \"disney\",\n        \"name\": \"Disney Non-Apologies\",\n        \"date\": \"August 2020\",\n        \"description\": \"Music video made for Vocabaret NYC's August 2020 show\", \n        \"url\": \"https://youtu.be/Dtx3eKCVXD8\"\n    },\n    {\n        \"tag\": \"cordyceps\",\n        \"name\": \"Cordyceps EP\",\n        \"date\": \"May 2020\",\n        \"description\": \"A short radio drama, recorded in May 2020.\",\n        \"url\": \"https://soundcloud.com/audioghan/sets/cordyceps-ep\"\n    },\n    {\n        \"tag\": \"zip\",\n        \"name\": \"Zip Magazine\",\n        \"date\": \"2017\",\n        \"description\": \"A mixed digital media magazine, distributed over email.\",\n        \"url\": '/zip'\n    },\n    {\n        \"tag\": \"powerboat\",\n        \"name\": \"Powerboat Italia '88 video game music\",\n        \"date\": \"June 2014\",\n        \"description\": \"Music for the indie arcade game, Powerboat Italia '88.\",\n        \"url\": \"https://soundcloud.com/audioghan/sets/powerboat-italia-88-video-game\"\n    },\n    {\n        \"tag\": \"igloo\",\n        \"name\": \"Igloo Command video game music\",\n        \"date\": \"May 2011\",\n        \"description\": \"Music for the indie arcade game, Igloo Command.\",\n        \"url\": \"https://soundcloud.com/audioghan/igloo-command-video-game-music\"\n    },\n    {\n        \"tag\": \"hidden-fantasies\",\n        \"name\": \"Hidden Fantasies\",\n        \"date\": \"December 2010\",\n        \"description\": \"A remix album of Metric's Fantasies album.\",\n        \"url\": \"https://soundcloud.com/audioghan/sets/hidden-fantasies\"\n    },\n    {\n        \"tag\": \"kill-bankers\",\n        \"name\": \"Kill Bankers\",\n        \"date\": \"September 2010\",\n        \"description\": \"A small project created in response to the 2008 financial crisis\",\n        \"url\": \"https://soundcloud.com/audioghan/sets/hidden-fantasies\"\n    }\n];\n","import React from 'react';\nimport routes from './../data/routes';\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n  const works = routes.map((w) => {\n    return (\n      <div key={w.tag}>\n        <h4><a href={w.url}>{w.name}</a></h4>\n        <p>{w.date}: {w.description}</p>\n      </div>\n    )\n  });\n\n  return (\n    <div id=\"home\">\n        <h1>ghan</h1>\n        <div style={{display: \"none\"}}>\n            <h3>Works</h3>\n            <div className=\"works-list\">\n                { works }\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction ZipHome() {\n  return (\n    <div>\n        <h1>Zip Magazine</h1>\n        <p>Zip Magazine was a digital periodical that ran monthly in 2017. Each issue was a zip file delivered to your email inbox. The zips contained an assortment of mixed media, revolving around a single theme.</p>\n        <p><a href=\"/zip/current\">December 2017 Issue</a></p>\n        <p><a href=\"https://tinyletter.com/zip/archive\">Read Every Email</a></p>\n        <p><a href=\"/zip/about\">About</a>&nbsp;&nbsp;<a href=\"/zip/faq\">Help</a>&nbsp;&nbsp;<a href=\"mailto:zip@ghan.co\">Contact</a></p>\n    </div>\n  );\n}\n\nexport default ZipHome;\n","import React from 'react';\n\nfunction FourOFour() {\n  return (\n    <div>\n        Not Found\n    </div>\n  );\n}\n\nexport default FourOFour;\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport routes from './data/routes';\nimport Home from './pages/Home';\nimport Zip from './pages/Zip';\nimport FourOFour from './pages/FourOFour';\nimport ExternalRoute from './components/ExternalRoute';\n\nexport default function App() {\n  const list = routes.map((r) => {\n    if (r.hasOwnProperty('url')) {\n      return (\n        <Route key={r.tag} exact path={`/${r.tag}`} component={() => { window.location = r.url; return null;} }/>\n      );\n    } else {\n      return null;\n    }\n  });\n\n  return (\n    <Router>\n      <Switch>\n        { list }\n        <Route exact path=\"/zip\">\n          <Zip />\n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path='*' exact>\n          <FourOFour/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}